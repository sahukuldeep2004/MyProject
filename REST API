API Architecture - Design Best Practices for REST APIs
https://blog.wahab2.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f
1. Learn the basics of HTTP
Although, as far as REST API design is concerned, here is a TLDR of HTTP applied to RESTful Design:
HTTP has verbs (actions or methods): GET, POST, PUT, PATCH and DELETE are most common.
REST is resource-oriented and a resource is represented by an URI: /library/
An endpoint is the combination of a verb and an URI, example: GET: /books/
An endpoint can be interpreted as an action performed on a resource. Example: POST: /books/ may mean "Create a new book".
At a high-level, verbs map to CRUD operations: GET means Read, POST means Create, PUT and PATCH mean Update, and DELETE means Delete
A responseâ€™s status is specified by its status code: 1xx for information, 2xx for success, 3xx for redirection, 4xx for client errors and 5xx for server errors.

2. Do not return plain text
3.Do not use verbs in URIs.
eg: # Donâ€™t do this POST: /books/createNewBook/
# Do this           POST: /books/
# Donâ€™t        GET: /books/:slug/generateBookCover/
# Do this      GET: /books/:slug/bookCover/
Use plural nouns for resources
GET: /books/2/
POST: /books/
4. Use plural nouns for resources
5. Return the error details in the response body.
{
    "error": "Invalid payload.",
    "detail": {
        "name": "This field is required."
    }
}
6. Make use of the HTTP status code, and only use the response body to provide error details.
HTTP/1.1 400 Bad Request
Content-Type: application/json
{
    "error": "Expected at least three items in the list."
}
7. You should use HTTP status codes consistently
8. Do not nest resources
Don't : GET: /authors/Cagan/books/
DO :  GET: /books?author=Cagan
9. Make use of the querystring for filtering and pagination
10. Make use of the querystring for filtering and pagination
11. Know the difference between 401 Unauthorized and 403 Forbidden
Has the consumer not provided authentication credentials? Was their SSO Token invalid/timed out? ðŸ‘‰ 401 Unauthorized.
Was the consumer correctly authenticated, but they donâ€™t have the required permissions/proper clearance to access the resource? ðŸ‘‰ 403 Forbidden
12. 
===========================================================================================================================================================
Performance Enhancement Tips
1. Reduce and limit the Payload Size : We can use GZip Compression to reduce our payload size.
2. Enable caching : If we have requests that frequently give back the same response, then a cached version of that response helps avoid additional service calls/database queries.
3. Provide sufficient Network speed :
This can be achieved by leveraging and purchasing sufficient cloud resources and infrastructure (example: in AWS, allocate the proper # of EC2 instances,
use a Network Load Balancer).
Also, if you have a large amount of background processes, run those on separate threads to avoid blocking requests. You can also use mirrors, 
and Content Delivery Networks (CDNs) such as CloudFront to serve requests faster around different parts of the globe.
4. Prevent accidental calls, slowdowns, and abuse
rate-limiting helps reduce excessive requests that would slow the API down, helps deal with accidental calls/executions, and proactively monitor and identify possible malicious activity.
5. Try to use PATCH over PUT
PUT operations update resources by sending updates to the entire resource. PATCH operations apply partial updates to only the resources 
that need updating. Resulting inPATCH calls that produce smaller payloads, and improve performance at scale.
6. Enable Logging, Monitoring, and Alerting
7. Enable Pagination
===============================================================================================================
A high-performing API is crucial for a great user experience and efficient application operation.
1. Caching
Store frequently accessed data in a cache (like Redis or Memcached) for rapid retrieval, bypassing the database for repeated requests.
2. Scale-out with Load Balancing
Distribute incoming requests across multiple server instances using a load balancer (like Nginx or HAProxy).
3. Asynchronous Processing
Acknowledge client requests immediately and process them in the background, sending results later.
4. Pagination
Limit the number of records returned per request and provide a way to retrieve subsequent pages.
5. Connection Pooling
Maintain a pool of reusable database connections instead of creating a new one for each request.
*Additional Tips**
- Optimize Database Queries
- Gzip Compression - Reduce response sizes.
- Content Delivery Network (CDN) - Cache static assets globally for faster delivery.
- Monitor and Profile - Use tools like New Relic or Datadog to identify bottlenecks. 
