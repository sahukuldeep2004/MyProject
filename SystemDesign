No matter your programming language, start by understanding the basics of how systems are designed.

👍 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐊𝐞𝐲 𝐂𝐨𝐧𝐜𝐞𝐩𝐭𝐬
1. Scalability: https://lnkd.in/gpge_z76
2. Latency vs Throughput: https://lnkd.in/g_amhAtN
3. CAP Theorem: https://lnkd.in/g3hmVamx
4. ACID Transactions: https://lnkd.in/gMe2JqaF
5. Rate Limiting: https://lnkd.in/gWsTDR3m
6. API Design: https://lnkd.in/ghYzrr8q
7. Strong vs Eventual Consistency: https://lnkd.in/gJ-uXQXZ
8. Distributed Tracing: https://lnkd.in/d6r5RdXG
9. Synchronous vs. asynchronous communications: https://lnkd.in/gC3F2nvr
10. Batch Processing vs Stream Processing: https://lnkd.in/g4_MzM4s
11. Fault Tolerance: https://lnkd.in/dVJ6n3wA

👍 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐁𝐮𝐢𝐥𝐝𝐢𝐧𝐠 𝐁𝐥𝐨𝐜𝐤𝐬
1. Databases: https://lnkd.in/gti8gjpz
2. Horizontal vs Vertical Scaling: https://lnkd.in/gAH2e9du
3. Caching: https://lnkd.in/gC9piQbJ
4. Distributed Caching: https://lnkd.in/g7WKydNg
5. Load Balancing: https://lnkd.in/gQaa8sXK
6. SQL vs NoSQL: https://lnkd.in/g3WC_yxn
7. Database Scaling: https://lnkd.in/gAXpSyWQ
8. Data Replication: https://lnkd.in/gVAJxTpS
9. Data Redundancy: https://lnkd.in/gNN7TF7n
10. Database Sharding: https://lnkd.in/gMqqc6x9
11. Database Index's: https://lnkd.in/gCeshYVt
12. Proxy Server: https://lnkd.in/gi8KnKS6
13. WebSocket: https://lnkd.in/g76Gv2KQ
14. API Gateway: https://lnkd.in/gnsJGJaM
15. Message Queues: https://lnkd.in/gTzY6uk8

👍 𝐒𝐲𝐬𝐭𝐞𝐦 𝐃𝐞𝐬𝐢𝐠𝐧 𝐀𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐚𝐥 𝐏𝐚𝐭𝐭𝐞𝐫𝐧𝐬
1. Event-Driven Architecture: https://lnkd.in/dp8CPvey 
2. Client-Server Architecture: https://lnkd.in/dAARQYzq
3. Serverless Architecture: https://lnkd.in/gQNAXKkb
4. Microservices Architecture: https://lnkd.in/gFXUrz_T

➤ 𝗕𝗮𝘀𝗶𝗰𝘀 𝗼𝗳 𝗦𝘆𝘀𝘁𝗲𝗺 𝗗𝗲𝘀𝗶𝗴𝗻
 • What is System Design?
 • Functional vs Non Functional Requirements
 • What are the components of System Design?
 • System Design Life Cycle | SDLC (Design)
 • Structured Analysis and Structured Design
 • System Design Strategy
 • Database Sharding - Concept
 • Horizontal and Vertical Scaling
 • Load Balancer in System Design
 • Routing requests through Load Balancer
 • Latency and Throughput in System Design
 • Object-Oriented Analysis and Design
 • Difference between Structured and Object-Oriented Analysis

➤ 𝗟𝗼𝘄 𝗟𝗲𝘃𝗲𝗹 𝗗𝗲𝘀𝗶𝗴𝗻 (𝗟𝗟𝗗)
 • What is Low Level Design or LLD
 • Data Structures and Algorithms for System Design
 • Event-Driven Architecture
 • Difference between Authentication and Authorization
 • What is API Gateway
 • What is Data Encryption?
 • Design Patterns
 • Code Optimization Techniques
 • Unit Testing
 • Integration Testing
 • CI/CD: Continuous Integration and Continuous Delivery
 • Introduction to Modularity and Interfaces In System Design
 • Data Partitioning Techniques
 • Class Diagrams | UML

➤ 𝗛𝗶𝗴𝗵 𝗟𝗲𝘃𝗲𝗹 𝗗𝗲𝘀𝗶𝗴𝗻 (𝗛𝗟𝗗)
 • What is High Level Design
 • Availability in System Design
 • Consistency in System Design
 • Reliability in System Design
 • CAP Theorem
 • Difference between Process and Thread
 • Difference between Concurrency and Parallelism
 • Load Balancer
 • Consistent Hashing
 • Content Delivery Network (CDN) in System Design
 • Caching in System Design
 • Cache Eviction Policies
 • Message Queues
 • Communication Protocols
 • Network Protocols and Proxies in System Design
 • Unified Modeling Language (UML)

➤ 𝗗𝗼 𝗧𝗵𝗲𝘀𝗲 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀
 • Design URL Shortening Service
 • Design Dropbox
 • Design Twitter
 • System Design Netflix - A Complete Architecture
 • System Design of Uber App - Uber System Architecture
 • Design Book My Show
 • Designing Facebook Messenger
 • Designing WhatsApp Messenger
 • Designing Instagram
